plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "idea"
    id "application"
}

repositories {
    mavenLocal() // This is temporary until TypedConfig is published somewhere
    mavenCentral()
}

configurations {
    // Define a custom configuration so that we can construct a classpath just for the generator.
    typedConfigGenerator
}

application {
    mainClass = "ApplicationKt"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // These are the two important dependencies.
    implementation "com.github.nanodeath:typedconfig-runtime:0.1" // Used by the generated config.
    typedConfigGenerator "com.github.nanodeath:typedconfig-codegen:0.1" // Used to generate the config.
}

// Define where we want to put the generated config.
// Can be anywhere under build/, really.
def generatedSourcesDirectory = "$buildDir/generated-sources"

task generateConfig(type: JavaExec) {
    def inputFile = "config.tc.toml" // This is just by convention.

    // Used by Gradle to only execute this task when inputs change.
    inputs.file(inputFile)
    outputs.dir(generatedSourcesDirectory)

    // Point the classpath at the custom configuration defined earlier
    classpath = configurations.typedConfigGenerator

    // Class we're executing
    mainClass.set("com.github.nanodeath.typedconfig.codegen.Generator")

    // The Codegen CLI accepts an input file and an output directory.
    args(inputFile, generatedSourcesDirectory)
}

// Require every JVM compile step (Java or Kotlin) to generate config classes first.
tasks.withType(AbstractCompile) {
    dependsOn("generateConfig")
}

// Add the generated sources directory to the source set.
// Without this, there's nothing connecting your source code and the generated source code;
// they won't be able to "see" each other.
sourceSets {
    main {
        java {
            srcDir(generatedSourcesDirectory)
        }
    }
}

// Tell IntelliJ that it's a generated sources directory.
// This enables IntelliJ to warn you when you're directly modifying generated files.
idea {
    module {
        generatedSourceDirs += file(generatedSourcesDirectory)
    }
}
